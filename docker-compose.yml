# docker compose up -d redis mongodb mysql postgres rabbitmq elasticsearch kibana
version: "3.9"
services:
  redis:
    container_name: redis_container
    image: redis:alpine
    # restart: always
    ports:
      - 6379:6379
    command: redis-server --loglevel warning
    volumes:
      - ./docker-volumes/cache:/data
  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    # restart: always
    ports:
      - 27017:27017
    volumes:
      - ./docker-volumes/data:/data/db
  mysql:
    container_name: mysql_container
    image: mysql:latest
    # restart: always
    environment:
      - MYSQL_USER=jobber
      - MYSQL_ROOT_PASSWORD=api
      - MYSQL_PASSWORD=api
      - MYSQL_DATABASE=jobber_auth
    ports:
      - '3306:3306'
    volumes:
      - ./docker-volumes/mysql:/var/lib/mysql
  postgres:
    container_name: postgres_container
    image: postgres:latest
    # restart: always
    environment:
      - POSTGRES_USER=jobber
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=jobber_reviews
    ports:
      - '5432:5432'
    volumes:
      - ./docker-volumes/postgres:/var/lib/postgresql/data
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    # restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=jobber
      - RABBITMQ_DEFAULT_PASS=jobberpass
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - ./docker-volumes/rabbitmq:/var/lib/rabbitmq
  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    # restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
      xpack.security.authc.token.enabled: "true"
      ELASTIC_PASSWORD: admin1234
    ports:
      - 9300:9300
      - 9200:9200
    volumes:
      - ./docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic  
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.12.2
    # restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch_container:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2pvYmJlci1raWJhbmE6N3BWZ0ItZWxSY21wMEJ0Y3ZKNTlHZw
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - XPACK_SECURITY_ENCRYPTIONKEY=fhjskloppd678ehkdfdlliverpoolfcr
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=fhjskloppd678ehkdfdlliverpoolfcr
      - XPACK_REPORTING_ENCRYPTIONKEY=fhjskloppd678ehkdfdlliverpoolfcr
      - XPACK_REPORTING_ROLES_ENABLED=false
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on: 
      - elasticsearch
  
  notifications:
    container_name: notifications_container
    build:
      context: server/2-notification-service
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - 4001:4001
    env_file: server/2-notification-service/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000
      - RABBITMQ_ENDPOINT=amqp://jobber:jobberpass@rabbitmq_container:5672
      - SENDER_EMAIL=testmailleraddress@gmail.com
      - SENDER_EMAIL_PASSWORD=xqldfnfonyggzexa
      - ELASTIC_SEARCH_URL=http://elastic:admin1234@localhost:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on: 
      - elasticsearch

networks:
  elastic:
    name: elastic