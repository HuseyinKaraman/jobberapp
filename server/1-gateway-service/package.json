{
  "name": "jobber-gateway",
  "description": "* The gateway microservice is responsible for managing requests that comes from the frontend. * Every request that comes from the frontend must pass through the `API Gateway Service`. * The communication style used in the service is the `Request/Response` pattern. * The gateway service is also responsible for request validation. It adds the `json web token` to the cookie session and checks if the token in a request is valid. * All client side errors from other microservices are sent to the gateway service. The gateway service sends these errors to the client. * Server side errors from the gateway microservice is sent to `elasticsearch` and can be viewed on `kibana`. * Gateway service uses these tools as the main tools   * `Your shared library`   * `NodeJS`   * `Express`   * `Typescript`   * `Axios`   * `Redis`   * `Elasticsearch`   * `Json web token`   * `SocketIO`   * `SocketIO client` * There are other packages that are used. * You can update the version of `NodeJS` used inside the `Dockerfile` and `Dockerfile.dev`. * Make sure you already have your own shared library published. * Copy the `.npmrc` file from your shared library folder and replace `${NPM_TOKEN}` with the actual `personal access token` you created. * Once you have your `.npmrc` and before you run `npm install` command, replace all occurrences of `@huseyinkaraman/jobber-shared` with your own shared library. * After replacing all occurrences of `@huseyinkaraman/jobber-shared`, you can then run `npm install` command. * Copy contents of `.env.dev` to `.env` file   * In the `DATABASE_HOST` env variable, use your own ip as its value.   * You can generate a new `GATEWAY_JWT_TOKEN` and `JWT_TOKEN`     * Just note that whatever you generate, that is what you will need to use in all the microservices that require those variables. * You can start the service with `npm run dev`.",
  "version": "1.0.0",
  "keywords": [],
  "author": "Huseyin Karaman",
  "license": "ISC",
  "main": "app.ts",
  "scripts": {
    "start": "pm2 start ./build/src/app.js -i 4 --attach --watch | pino-pretty -c",
    "stop": "pm2 stop all",
    "delete": "pm2 delete all",
    "dev": "nodemon -r tsconfig-paths/register src/app.ts | pino-pretty -c",
    "lint": "eslint 'src/**/*.ts'",
    "lint:fix": "eslint --fix 'src/**/*.ts'",
    "prettier:check": "prettier --check 'src/**/*.{ts,json}'",
    "prettier:fix": "prettier --write 'src/**/*.{ts,json}'",
    "build": "tsc --project tsconfig.json && tsc-alias -p tsconfig.json && ts-node tools/copyAssets.ts",
    "test": "jest --coverage=true -w=1 --forceExit --detectOpenHandles --watchAll=false"
  },
  "devDependencies": {
    "@types/compression": "^1.7.5",
    "@types/cookie-session": "^2.0.49",
    "@types/cors": "^2.8.17",
    "@types/dotenv": "^6.1.1",
    "@types/express": "^5.0.0",
    "@types/hpp": "^0.2.6",
    "@types/jsonwebtoken": "^9.0.9",
    "@typescript-eslint/eslint-plugin": "^8.24.0",
    "@typescript-eslint/parser": "^8.24.0",
    "eslint": "^9.20.1",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-import": "^2.31.0",
    "prettier": "^3.5.1",
    "ts-node": "^10.9.2",
    "tsc-alias": "^1.8.10",
    "tsconfig-paths": "^4.2.0"
  },
  "dependencies": {
    "@elastic/elasticsearch": "^8.17.1",
    "@huseyinkaraman/jobber-shared": "^0.0.5",
    "axios": "^1.8.3",
    "bcryptjs": "^3.0.2",
    "compression": "^1.8.0",
    "cookie-session": "^2.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "helmet": "^8.1.0",
    "hpp": "^0.2.3",
    "http-status-codes": "^2.3.0",
    "jsonwebtoken": "^9.0.2",
    "pino-pretty": "^13.0.0",
    "typescript": "^5.8.2",
    "typescript-transform-paths": "^3.5.3",
    "winston": "^3.17.0"
  }
}
